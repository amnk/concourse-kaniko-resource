#!/usr/bin/env python
from __future__ import print_function

import json
import logging
import os
import shutil
import subprocess
import sys
import time
from shlex import split


def configure_logging():
    logging.basicConfig(level=logging.DEBUG)
    for handler in logging.root.handlers[:]:
        logging.root.removeHandler(handler)
    logger_instance = logging.getLogger("general")
    stderr = logging.StreamHandler(sys.stderr)
    stderr.setFormatter(logging.Formatter('%(levelname)s: %(message)s'))
    stderr.setLevel(logging.DEBUG)
    log.addHandler(stderr)
    return logger_instance


log = configure_logging()


class ShellCommand(object):

    def __init__(self, command):
        self.commands = command.split(" ")

    def concatenate(self, other_command):
        self.commands.append("&&")
        self.commands.extend(other_command.build_list())
        return self

    def add_option(self, option, value=None, assignment_character=" "):
        if value is None:
            self.commands.append(option)
        else:
            if assignment_character == " ":
                self.commands.append(option)
                self.commands.append(value)
            else:
                self.commands.append(option + assignment_character + value)
        return self

    def add_arg(self, value):
        self.commands.append(value)
        return self

    def build_list(self):
        return self.commands

    def build_string(self):
        return " ".join(self.commands)


def get_tag(params):
    if "tag_file" in params:
        with open(params["tag_file"], "r") as fh:
            return fh.read().strip()
    return "latest"


def get_destination(params):
    tag = get_tag(params)
    return params["registry"] + "/" + params["image_name"] + ":" + tag


def get_dockerfile(params):
    if "dockerfile" in params:
        return params["dockerfile"]

    return "Dockerfile"


def get_context(params):
    if "build_context" in params:
        return "/tmp/build/put/" + params["build_context"]

    return None


def set_argument(argument_store, argument_name, value):
    if value is not None:
        argument_store[argument_name] = value


def build_kaniko_command(payload):
    argument_store = {}
    params = payload["params"]
    set_argument(argument_store, "--context", get_context(params))
    set_argument(argument_store, "--destination", get_destination(params))
    set_argument(argument_store, "--dockerfile", get_dockerfile(params))

    command = ShellCommand("executor")
    for argument_key in argument_store:
        command.add_option(argument_key, argument_store[argument_key], "=")

    return command


def do_docker_auth(source, kaniko_home_folder):
    kaniko_docker_folder = kaniko_home_folder + ".docker/"
    if "docker_config_file" in source:
        if not os.path.exists(kaniko_docker_folder):
            os.makedirs(kaniko_docker_folder)
        shutil.copyfile(source["docker_config_file"], kaniko_docker_folder + "config.json")


def execute_kaniko_command(payload, kaniko_build_command):
    command_run_logs = ''

    # Run command
    proc = subprocess.Popen(split(kaniko_build_command), stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    while True:
        byte = proc.stdout.read(1)
        if byte:
            sys.stderr.buffer.write(byte)
            sys.stderr.flush()
            command_run_logs += str(byte, 'utf-8')
        else:
            break

    # Wait for command to exit
    while proc.poll() is None:
        # Process hasn't exited yet, let's wait some
        time.sleep(0.5)

    last_line = command_run_logs.strip().split("\n")[-1]

    log.info("Proc exited with code: " + str(proc.returncode))

    if proc.returncode == 0:
        sha = last_line.split(" ")[4]

        concourse_output = {
            "version": {"ref": sha},
            "metadata": [
                {"name": "image_name", "value": payload["params"]["image_name"]},
                {"name": "registry", "value": payload["params"]["registry"]},
                {"name": "tag", "value": get_tag(payload["params"])},
            ]
        }

        log.info(json.dumps(concourse_output))

        print(json.dumps(concourse_output))


def run(payload, args):
    if payload["source"] is None:
        payload["source"] = {}

    with open("payload.json", "w") as fh:
        fh.write(json.dumps(payload))

    log.info("Payload: " + str(payload))
    kaniko_home_folder = "/kankiko/"
    if not len(args) == 0 and args[0] == "test":
        kaniko_home_folder = os.getcwd() + "/test/kaniko/"

    do_docker_auth(payload["source"], kaniko_home_folder)
    kaniko_command = build_kaniko_command(payload)
    kaniko_command_string = kaniko_command.build_string()

    log.info("Command: " + kaniko_command_string)

    if len(args) == 0 or args[0] != "test":
        execute_kaniko_command(payload, kaniko_command_string)


run(json.loads(sys.stdin.read()), sys.argv[1:])
